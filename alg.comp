#version 450
// #extension GL_EXT_shader_explicit_arithmetic_types: enable

layout(local_size_x = 32) in;

// How much of the 20 foot thing we're done with
// uint64_t cur_sum = 0;

layout(std430) buffer;

layout(binding = 0) buffer Slices {
    uint slices[];
};

// Pass the size of the pipe to GPU as 32 inch segments
// For example, 20 * 12 * 32
layout(binding = 1) buffer Config {
    uint PIPE_SIZE;
    uint ROW_SIZE;
};

// sum of wasted
layout(binding = 2) buffer Wasted {
    uint wastes[];
};

uint getElement(uint row, uint col) {
    return slices[row * ROW_SIZE + col];
}

void main() {
    // if current slice is smaller than whatever is left, then we subtract

    // #extension GL_EXT_shader_explicit_arithmetic_types: enable

    // else, we move onto the next pipe

    // this means that we add whatever is left to the wasted sum
    // and then subtract off the current slice from the next pipe

    uint index = gl_GlobalInvocationID.x;
    uint remaining_pipe = PIPE_SIZE;
    uint wasted = 0;

    for (uint i = 0; i < ROW_SIZE; i++) {
        uint slice = getElement(index, i);
        if (slice < remaining_pipe)
        {
            remaining_pipe -= slice;
        } else {
            wasted += remaining_pipe;
            remaining_pipe = PIPE_SIZE - slice;
        }
    }
    wasted += remaining_pipe;
    wastes[index] = wasted;
    // I'm just going to ignore the case where this thing crashes
    // meaning asking for a 22foot slice from a 20 foot pipe
}
