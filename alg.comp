#version 450

// Constants for SHA-256
const uint k[64] = uint[64](
        0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    );

// Initial hash values for SHA-256
const uint initial_hash[8] = uint[8](
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
    );

layout(std430, binding = 0) buffer InputBuffer {
    uint data[16]; // 512-bit input block (16 * 32-bit words)
};

layout(std430, binding = 1) buffer OutputBuffer {
    uint hash[8]; // 256-bit output hash (8 * 32-bit words)
};

// Helper functions for SHA-256 operations
uint rotr(uint x, uint n) {
    return (x >> n) | (x << (32 - n));
}

uint ch(uint x, uint y, uint z) {
    return (x & y) ^ (~x & z);
}

uint maj(uint x, uint y, uint z) {
    return (x & y) ^ (x & z) ^ (y & z);
}

uint sigma0(uint x) {
    return rotr(x, 2) ^ rotr(x, 13) ^ rotr(x, 22);
}

uint sigma1(uint x) {
    return rotr(x, 6) ^ rotr(x, 11) ^ rotr(x, 25);
}

uint gamma0(uint x) {
    return rotr(x, 7) ^ rotr(x, 18) ^ (x >> 3);
}

uint gamma1(uint x) {
    return rotr(x, 17) ^ rotr(x, 19) ^ (x >> 10);
}

// Assume `data` is an input array holding the message as bytes
// `dataLength` is the original length of the data in bytes
// `paddedData` will hold the padded data
void applyPadding(inout uint paddedData[], uint dataLength) {
    uint paddedLength = (dataLength + 9 + 63) & ~uint(63); // Round up to nearest multiple of 64

    // Copy the original data into paddedData
    for (uint i = 0; i < dataLength; ++i) {
        paddedData[i >> 2] |= uint(data[i]) << ((3 - (i & 3)) * 8);
    }

    // Append the '1' bit after the message
    paddedData[dataLength >> 2] |= uint(0x80) << ((3 - (dataLength & 3)) * 8);

    // Write the original message length in bits in the last 64 bits of paddedData
    uint bitLength = dataLength * 8u;
    paddedData[(paddedLength / 4) - 2] = bitLength >> 32;
    paddedData[(paddedLength / 4) - 1] = bitLength & 0xFFFFFFFFu;
}

void main() {
    // Initialize hash values for this block
    uint h[8];
    for (int i = 0; i < 8; i++) {
        h[i] = initial_hash[i];
    }

    // Message schedule array
    uint w[64];
    for (int t = 0; t < 16; t++) {
        w[t] = data[t];
    }
    for (int t = 16; t < 64; t++) {
        w[t] = gamma1(w[t - 2]) + w[t - 7] + gamma0(w[t - 15]) + w[t - 16];
    }

    // Main SHA-256 computation loop
    for (int t = 0; t < 64; t++) {
        uint t1 = h[7] + sigma1(h[4]) + ch(h[4], h[5], h[6]) + k[t] + w[t];
        uint t2 = sigma0(h[0]) + maj(h[0], h[1], h[2]);
        h[7] = h[6];
        h[6] = h[5];
        h[5] = h[4];
        h[4] = h[3] + t1;
        h[3] = h[2];
        h[2] = h[1];
        h[1] = h[0];
        h[0] = t1 + t2;
    }

    // Add the compressed chunk to the current hash value
    for (int i = 0; i < 8; i++) {
        hash[i] = h[i] + initial_hash[i];
    }
}
